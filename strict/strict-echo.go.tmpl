//Generated with strict-echo.tmpl

type StrictOption func(*strictHandler)

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, opts ...StrictOption) ServerInterface {
	handler := &strictHandler{ssi: ssi}
    if opts != nil && len(opts) >0 {
        for _,opt := range opts {
            if opt != nil {
				opt(handler)
			}
        }
    }
	return handler
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	tracer      trace.Tracer
}

func WithMiddlewares(middlewares []StrictMiddlewareFunc) StrictOption {
	return func(s *strictHandler) {
		s.middlewares = middlewares
	}
}

func WithTracer(tracer trace.Tracer) StrictOption {
	return func(s *strictHandler) {
		s.tracer = tracer
	}
}

{{range .}}
    {{$opid := .OperationId}}
    // {{$opid}} operation middleware
    func (sh *strictHandler) {{.OperationId}}(ctx echo.Context{{genParamArgs .PathParams}}{{if .RequiresParamObject}}, params {{.OperationId}}Params{{end}})(err error) {
        if sh.tracer != nil {
            cx, span := sh.tracer.Start(ctx.Request().Context(), "{{.OperationId}}Handler")
            ctx.SetRequest(ctx.Request().WithContext(cx))
            defer func(span trace.Span) {
                if err != nil {
                    span.SetStatus(codes.Error, err.Error())
                    span.RecordError(err)
                }
                span.End()
            }(span)

        {{if gt (len .PathParams) 0 -}}
            
            span.SetAttributes(
                {{range .PathParams -}}
                attribute.String("path.{{.GoName}}", ctx.Param("{{.ParamName}}")),
                {{end -}}
            )
                
        {{end}}
        }

        //set logger context.
        log := tlog.FromEcho(ctx)
        
        var request {{$opid | ucFirst}}RequestObject

        {{range .PathParams -}}
            request.{{.GoName}} = {{.GoVariableName}}
        {{end -}}

        {{if gt (len .PathParams) 0 -}}
        log = log.With(
            slog.Group(
                "path",
                {{range .PathParams -}}
                    slog.String("{{.GoName}}", ctx.Param("{{.ParamName}}")),
                {{end -}}
            ),
        )

        {{end}}

        {{if .RequiresParamObject -}}
            request.Params = params
        {{end -}}

        {{ if .HasMaskedRequestContentTypes -}}
            request.ContentType = ctx.Request().Header.Get("Content-Type")
        {{end -}}

        {{$multipleBodies := gt (len .Bodies) 1 -}}
        {{range .Bodies -}}
            {{if $multipleBodies}}if strings.HasPrefix(ctx.Request().Header.Get("Content-Type"), "{{.ContentType}}") { {{end}}
                {{if .IsJSON -}}
                    var body {{$opid}}{{.NameTag}}RequestBody
                    b := &bytes.Buffer{}
                    b.ReadFrom(ctx.Request().Body)
                    if err = json.UnmarshalRead(b, &body); err != nil {
                        log.Err("failed to unmarshal body in request", 
                            err, 
                            slog.String("request.body", b.String()),
                        )
                        if sh.tracer != nil {
                            trace.SpanFromContext(ctx.Request().Context()).
                                SetAttributes(attribute.String("request.body", b.String()))
                        }
                        return err
                    }
                    request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
                {{else if eq .NameTag "Formdata" -}}
                    if form, err := ctx.FormParams(); err == nil {
                        var body {{$opid}}{{.NameTag}}RequestBody
                        if err := runtime.BindForm(&body, form, nil, nil); err != nil {
                            return err
                        }
                        request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
                    } else {
                        return err
                    }
                {{else if eq .NameTag "Multipart" -}}
                    if reader, err := ctx.Request().MultipartReader(); err != nil {
                        return err
                    } else {
                        request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = reader
                    }
                {{else if eq .NameTag "Text" -}}
                    data, err := io.ReadAll(ctx.Request().Body)
                    if err != nil {
                        return err
                    }
                    body := {{$opid}}{{.NameTag}}RequestBody(data)
                    request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
                {{else -}}
                    request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = ctx.Request().Body
                {{end}}{{/* if eq .NameTag "JSON" */ -}}
            {{if $multipleBodies}}}{{end}}
        {{end}}{{/* range .Bodies */}}

        cx := tlog.Context(ctx.Request().Context(), log)
        ctx.SetRequest(ctx.Request().WithContext(cx))

        handler := func(ctx echo.Context, request interface{}) (interface{}, error){
            return sh.ssi.{{.OperationId}}(ctx.Request().Context(), request.({{$opid | ucFirst}}RequestObject))
        }
        for _, middleware := range sh.middlewares {
            handler = middleware(handler, "{{.OperationId}}")
        }
        log.Info("Calling handler")
        response, err := handler(ctx, request)

        if err != nil {
            log.Err(fmt.Sprintf("error response from {{.OperationId}} handler: %s", err.Error()), err)
            return err
        } else if validResponse, ok := response.({{$opid | ucFirst}}ResponseObject); ok {
            return validResponse.Visit{{$opid}}Response(ctx.Response())
        } else if response != nil {
            return fmt.Errorf("unexpected response type: %T", response)
        }
        return nil
    }
{{end}}
