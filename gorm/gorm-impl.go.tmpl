
//gorm template for creating the implementation to the interface functions defined above.
{{define "gorm-impl"}}
//Generated with gorm/gorm-impl.go.tmpl
    type Logger interface {
        Errorf(message string, args ...interface{})
        Warnf(message string, args ...interface{})
        Infof(message string, args ...interface{})
        Debugf(message string, args ...interface{})
    }
    var _ GormInterface = (*GormImpl)(nil)
    type GormImpl struct {
        DB     *gorm.DB
        Logger Logger
        Tracer trace.Tracer
        Validator *validator.Validate
    }

    {{range .Types}}
        {{if and (ne nil .Schema.OAPISchema) (hasKey .Schema.OAPISchema.Extensions "x-oapi-gorm")}}
            {{$dat := get .Schema.OAPISchema.Extensions "x-oapi-gorm"}}
            //Create a new {{.TypeName}}. No data validation is done.
            func (g *GormImpl)Create{{.TypeName}}(ctx context.Context, data {{.TypeName}}, middleware ...TXMiddleware) (err error) {
                ctx, span := g.Tracer.Start(ctx, "Create{{.TypeName}}")
                defer span.End()
                defer func(span trace.Span) {
                    if err != nil {
                        if _, ok := err.(circuit.SimpleBadRequest); !ok {
                            span.SetStatus(codes.Error, err.Error())
                            span.RecordError(err)
                        }
                    }
                }(span)

                {{if gt (len (dig "validation" "createKeys"  (list) $dat )) 0 }}
                    var v *validator.Validate
                    if g.Validator != nil {
                        v = g.Validator
                    } else {
                        v = validator.New()
                    }
                    v.SetTagName("{{dig "validation" "tag" "gormValidate" $dat}}")
                    err = v.StructPartialCtx(ctx, data, {{range $k, $v := (dig "validation" "createKeys" (list) $dat)}}{{if gt $k 0}},{{end}}"{{.}}"{{end}})
                    if err != nil {
                        return circuit.SimpleBadRequest{
                            Err: fmt.Errorf("validation error: %w", err),
                        }
                    }
                {{end}}

                // Do gorm request: Create the {{.TypeName}}
                req := g.DB.WithContext(ctx).
                    Model({{.TypeName}}{})
                for _,m := range middleware {
                    req = m(req)
                }
                err = req.Create(&data).Error
                // Check for gorm error.
                if err != nil {
                    return fmt.Errorf("error creating {{.TypeName}} in gorm: %w", err)
                }
                return nil
            }
            //Get{{.TypeName}} gets the first data that matches. If no match is found, returns nil, nil
            func (g *GormImpl)Get{{.TypeName}}(ctx context.Context, filter {{.TypeName}}, middleware ...TXMiddleware) (data *{{.TypeName}}, err error) {
                ctx, span := g.Tracer.Start(ctx, "Get{{.TypeName}}")
                defer span.End()
                defer func(span trace.Span) {
                    if err != nil {
                        if _, ok := err.(circuit.SimpleBadRequest); !ok {
                            span.SetStatus(codes.Error, err.Error())
                            span.RecordError(err)
                        }
                    }
                }(span)

                {{if gt (len (dig "validation" "getKeys"  (list) $dat )) 0 }}
                    var v *validator.Validate
                    if g.Validator != nil {
                        v = g.Validator
                    } else {
                        v = validator.New()
                    }
                    v.SetTagName("{{dig "validation" "tag" "gormValidate" $dat}}")
                    err = v.StructPartialCtx(ctx, data, {{range $k, $v := (dig "validation" "getKeys" (list) $dat)}}{{if gt $k 0}},{{end}}"{{.}}"{{end}})
                    if err != nil {
                        return circuit.SimpleBadRequest{
                            Err: fmt.Errorf("validation error: %w", err),
                        }
                    }
                {{end}}

                // Do gorm request: Get the {{.TypeName}}
                data = new({{.TypeName}})
                req := g.DB.WithContext(ctx).
                    Model(&{{.TypeName}}{}).
                    Where(&filter)
                for _,m := range middleware {
                    req = m(req)
                }
                err = req.Find(data).Error
                // Check for gorm error.
                if err != nil {
                    if errors.Is(err, gorm.ErrRecordNotFound) {
                        return nil, nil
                    }
                    return nil, fmt.Errorf("error creating {{.TypeName}} in gorm: %w", err)
                }
                return data, nil
            }            //Get{{.TypeName}} gets the first data that matches. If no match is found, returns nil, nil
            func (g *GormImpl) BulkGet{{.TypeName}}(ctx context.Context, filter {{.TypeName}}, limit int, offset int, orderBy string, middleware ...TXMiddleware) (data []*{{.TypeName}}, err error) {
                ctx, span := g.Tracer.Start(ctx, "BulkGet{{.TypeName}}")
                defer span.End()
                defer func(span trace.Span) {
                    if err != nil {
                        if _, ok := err.(circuit.SimpleBadRequest); !ok {
                            span.SetStatus(codes.Error, err.Error())
                            span.RecordError(err)
                        }
                    }
                }(span)

                {{if gt (len (dig "validation" "getKeys"  (list) $dat )) 0 }}
                    var v *validator.Validate
                    if g.Validator != nil {
                        v = g.Validator
                    } else {
                        v = validator.New()
                    }
                    v.SetTagName("{{dig "validation" "tag" "gormValidate" $dat}}")
                    err = v.StructPartialCtx(ctx, data, {{range $k, $v := (dig "validation" "getKeys" (list) $dat)}}{{if gt $k 0}},{{end}}"{{.}}"{{end}})
                    if err != nil {
                        return circuit.SimpleBadRequest{
                            Err: fmt.Errorf("validation error: %w", err),
                        }
                    }
                {{end}}
                

                // Do gorm request: Get the {{.TypeName}}
                data = make([]*{{.TypeName}}, 0)
                req := g.DB.WithContext(ctx).
                    Model(&{{.TypeName}}{}).
                    Where(&filter)
                for _,m := range middleware {
                    req = m(req)
                }
                if limit > 0 {
                    req = req.Limit(limit)
                }
                if offset < 0 {
                    req = req.Offset(offset)
                }
                if orderBy != "" {
                    req = req.Order(orderBy)
                }
                err = req.Find(&data).Error

                // Check for gorm error.
                if err != nil {
                    if errors.Is(err, gorm.ErrRecordNotFound) {
                        return nil, nil
                    }
                    return nil, fmt.Errorf("error creating {{.TypeName}} in gorm: %w", err)
                }
                return data, nil
            }
            func (g *GormImpl)Update{{.TypeName}}(ctx context.Context, filter {{.TypeName}}, keys []string, data {{.TypeName}}, middleware ...TXMiddleware) (err error) {
                ctx, span := g.Tracer.Start(ctx, "Update{{.TypeName}}")
                defer span.End()
                defer func(span trace.Span) {
                    if err != nil {
                        if _, ok := err.(circuit.SimpleBadRequest); !ok {
                            span.SetStatus(codes.Error, err.Error())
                            span.RecordError(err)
                        }
                    }
                }(span)
                {{if gt (len (dig "validation" "updateKeys"  (list) $dat )) 0 }}
                    var v *validator.Validate
                    if g.Validator != nil {
                        v = g.Validator
                    } else {
                        v = validator.New()
                    }
                    v.SetTagName("{{dig "validation" "tag" "gormValidate" $dat}}")
                    err = v.StructPartialCtx(ctx, data, {{range $k, $v := (dig "validation" "updateKeys" (list) $dat)}}{{if gt $k 0}},{{end}}"{{.}}"{{end}})
                    if err != nil {
                        return circuit.SimpleBadRequest{
                            Err: fmt.Errorf("validation error: %w", err),
                        }
                    }
                {{end}}

                // Verify update request has required key ammount.
                if len(keys) <= 0 {
                    return circuit.SimpleBadRequest{
                        Err: fmt.Errorf("at least one key required to update"),
                    }
                }
                // Identify which values to update.
                selects := make([]any, len(keys))
                for i, v := range keys {
                    selects[i] = g.DB.NamingStrategy.ColumnName("", v)
                }

                // Do gorm request: Update the record where universeUUID and characterUUID match.
                req := g.DB.WithContext(ctx).
                    Model(&{{.TypeName}}{}).
                    Omit(
                        {{range get $dat "updateIgnore"}}
                        "{{.}}",
                        {{end}}
                        
                    ).
                    //automatically update anything that we pass in the requested fields for.
                    Select(selects[0], selects[1:]...).
                    Where(&filter)

                for _,m := range middleware {
                    req = m(req)
                }
                err = req.Updates(&data).Error

                // Check for gorm error.
                if err != nil {
                    return fmt.Errorf("error updating {{.TypeName}} in gorm: %w", err)
                }
                // Return nil on success.
                return nil
            }
            //Delete{{.TypeName}} deletes all data matching the supplied filter.
            func (g *GormImpl)Delete{{.TypeName}}(ctx context.Context, filter {{.TypeName}}, middleware ...TXMiddleware) (err error) {
                ctx, span := g.Tracer.Start(ctx, "Delete{{.TypeName}}")
                defer span.End()
                defer func(span trace.Span) {
                    if err != nil {
                        if _, ok := err.(circuit.SimpleBadRequest); !ok {
                            span.SetStatus(codes.Error, err.Error())
                            span.RecordError(err)
                        }
                    }
                }(span)

                {{if gt (len (dig "validation" "deleteKeys"  (list) $dat )) 0 }}
                    var v *validator.Validate
                    if g.Validator != nil {
                        v = g.Validator
                    } else {
                        v = validator.New()
                    }
                    v.SetTagName("{{dig "validation" "tag" "gormValidate" $dat}}")
                    err = v.StructPartialCtx(ctx, data, {{range $k, $v := (dig "validation" "deleteKeys" (list) $dat)}}{{if gt $k 0}},{{end}}"{{.}}"{{end}})
                    if err != nil {
                        return circuit.SimpleBadRequest{
                            Err: fmt.Errorf("validation error: %w", err),
                        }
                    }
                {{end}}
                // Do gorm request: Get the {{.TypeName}}
                req := g.DB.WithContext(ctx).
                    Model(&{{.TypeName}}{}).
                    Where(&filter)
                for _,m := range middleware {
                    req = m(req)
                }
                err = req.Delete(&{{.TypeName}}{}).Error
                // Check for gorm error.
                if err != nil {
                    return fmt.Errorf("error creating {{.TypeName}} in gorm: %w", err)
                }
                return nil
            }
        {{end}}
    {{end}}
{{end}}

