//defines a series of dataloader funcs that 
//can be used for the ClientWithResponses
//as well as dataloaders that can be used for
//the gorm queries. They are built in those groups
{{define "dataloader"}}

    {{template "DataloaderCache" .}}
    {{template "DataloaderStruct" .}}
    {{template "DataloaderDataloaders" .}}

{{end}}

{{define "DataloaderCache"}}
//Created by gorm-dataloader.go.tmpl/DataloaderCache

    //Generated with gorm/gorm-dataloaders.go.tmpl

    //create the tool that creates a timeout-ing cache compatable with dataloaders.
    func NewTimeoutCache[K comparable, V any](size int, timeout time.Duration) dataloader.Cache[K, V] {
        if size <= 0 {
            size = 1000
        }
        if timeout <= 0 {
            timeout = time.Minute
        }
        backing, _ := lru.New[K, ItemWithTimeout[V]](size)
        return CacheImpl[K, V]{
            backing: backing,
            timeout: timeout,
            mux:     &sync.Mutex{},
        }
    }
    type CacheImpl[K comparable, V any] struct {
        timeout time.Duration
        backing *lru.Cache[K, ItemWithTimeout[V]]
        mux     *sync.Mutex
    }
    type ItemWithTimeout[V any] struct {
        spoil time.Time
        data  dataloader.Thunk[V]
    }
    func (c CacheImpl[K, V]) Get(ctx context.Context, key K) (dataloader.Thunk[V], bool) {
        c.mux.Lock()
        defer c.mux.Unlock()
        if c.backing.Contains(key) {
            dat, ok := c.backing.Get(key)
            if !ok {
                return nil, false
            }
            if time.Now().After(dat.spoil) {
                c.backing.Remove(key)
                return nil, false
            }
            return dat.data, ok
        }
        return nil, false
    }
    func (c CacheImpl[K, V]) Set(ctx context.Context, key K, thunk dataloader.Thunk[V]) {
        c.mux.Lock()
        defer c.mux.Unlock()
        c.backing.Add(key, ItemWithTimeout[V]{
            spoil: time.Now().Add(c.timeout),
            data:  thunk,
        })
    }
    func (c CacheImpl[K, V]) Delete(ctx context.Context, key K) bool {
        c.mux.Lock()
        defer c.mux.Unlock()
        return c.backing.Remove(key)
    }
    func (c CacheImpl[K, V]) Clear() {
        c.mux.Lock()
        defer c.mux.Unlock()
        c.backing.Purge()
    }
{{end}}


{{define "DataloaderStruct"}}
//Created by gorm-dataloader.go.tmpl/DataloaderStruct

    type GormDataloader struct {
        g *GormImpl
        GormDataloaderParams GormDataloaderParams
        {{range .Types}}

            {{if and (ne nil .Schema.OAPISchema) (hasKey .Schema.OAPISchema.Extensions "x-oapi-gorm")}}
                {{$dat := get .Schema.OAPISchema.Extensions "x-oapi-gorm"}}
                {{if hasKey $dat "batch" -}}

                {{$key := $dat.batch.key}}
                {{$type := $dat.batch.type}}
                {{.TypeName}}Dataloader *dataloader.Loader[{{$type}},{{.TypeName}}]
                
                {{end -}}
            {{end}}
        {{end}}
    }

    type GormDataloaderParams struct {
        {{range .Types}}
            {{if and (ne nil .Schema.OAPISchema) (hasKey .Schema.OAPISchema.Extensions "x-oapi-gorm")}}
                {{$dat := get .Schema.OAPISchema.Extensions "x-oapi-gorm"}}
                {{if hasKey $dat "batch" -}}

                {{.TypeName}}GormDataloaderParams *{{.TypeName}}GormDataloaderParams 

                {{end -}}
            {{end}}
        {{end}}
    }

    {{range .Types}}
            {{if and (ne nil .Schema.OAPISchema) (hasKey .Schema.OAPISchema.Extensions "x-oapi-gorm")}}
                {{$dat := get .Schema.OAPISchema.Extensions "x-oapi-gorm"}}
                {{if hasKey $dat "batch" -}}

                    type {{.TypeName}}GormDataloaderParams  struct {
                        CacheCount            int
                        CacheTime             time.Duration
                        WaitTime              time.Duration
                        BatchCapacity         int
                        DisableAutoErrorClear bool
                    }
                {{end -}}
            {{end}}
        {{end}}

    func NewGormDataloader(g *GormImpl, params GormDataloaderParams) *GormDataloader{
        dl := &GormDataloader{
            g: g,
            GormDataloaderParams: params,
        }

        {{range .Types}}

            {{if and (ne nil .Schema.OAPISchema) (hasKey .Schema.OAPISchema.Extensions "x-oapi-gorm")}}
                {{$dat := get .Schema.OAPISchema.Extensions "x-oapi-gorm"}}
                {{if hasKey $dat "batch" -}}

                {{$key := $dat.batch.key}}
                {{$type := $dat.batch.type}}
                {{.TypeName}}Func := func(ctx context.Context, in []{{$type}}) []*dataloader.Result[{{.TypeName}}] {
                    data, err := dl.g.BatchGet{{.TypeName}}(ctx, in)
                    out := make([]*dataloader.Result[{{.TypeName}}], 0)
                    if err != nil {
                        for range in {
                            out = append(out, &dataloader.Result[{{.TypeName}}]{
                                Error: pErrors.Wrap(err,"failed batch request"),
                            })
                        }
                    }

                    outMap := make(map[{{$type}}]{{.TypeName}})
                    for i := range data {
                        if data[i] != nil {
                            outMap[data[i].{{$key}}] = *data[i]
                        }
                    }

                    for _,arg := range in {
                        res := &dataloader.Result[{{.TypeName}}]{}
                        d, ok := outMap[arg]
                        if ok {
                            res.Data = d
                        } else {
                            res.Error = gorm.ErrRecordNotFound
                        }
                        out = append(out, res)
                    }

                    return out
                }
                if params.{{.TypeName}}GormDataloaderParams == nil {
                    params.{{.TypeName}}GormDataloaderParams = &{{.TypeName}}GormDataloaderParams{
                        CacheCount:    1000,
                        CacheTime:     time.Minute,
                        WaitTime:       time.Millisecond*16,
                        BatchCapacity: 100,
                    }
                }
                if params.{{.TypeName}}GormDataloaderParams.WaitTime <= 0 {
                    params.{{.TypeName}}GormDataloaderParams.WaitTime = time.Millisecond*16
                }
                if params.{{.TypeName}}GormDataloaderParams.BatchCapacity < 0 {
                    params.{{.TypeName}}GormDataloaderParams.BatchCapacity = 0
                }
                

                {{.TypeName}}Cache := NewTimeoutCache[{{$type}}, {{.TypeName}}](params.{{.TypeName}}GormDataloaderParams.CacheCount, params.{{.TypeName}}GormDataloaderParams.CacheTime)
                dl.{{.TypeName}}Dataloader = dataloader.NewBatchedLoader(
                    {{.TypeName}}Func,
                    dataloader.WithCache({{.TypeName}}Cache),
                    dataloader.WithWait[{{$type}}, {{.TypeName}}](params.{{.TypeName}}GormDataloaderParams.WaitTime),
                    dataloader.WithBatchCapacity[{{$type}}, {{.TypeName}}](params.{{.TypeName}}GormDataloaderParams.BatchCapacity),
                )

                {{end -}}
            {{end}}
        {{end}}

        return dl
    }


{{end}}

{{define "DataloaderDataloaders"}}
//Created by gorm-dataloader.go.tmpl/DataloaderDataloaders

    {{range .Types}}
        {{if and (ne nil .Schema.OAPISchema) (hasKey .Schema.OAPISchema.Extensions "x-oapi-gorm")}}
            {{$dat := get .Schema.OAPISchema.Extensions "x-oapi-gorm"}}
            {{if hasKey $dat "batch" -}}
            {{$key := $dat.batch.key}}
            {{$type := $dat.batch.type}}
            func (DS *GormDataloader) {{.TypeName}}Clear(ctx context.Context, key {{$type}}) {
                DS.{{.TypeName}}Dataloader.Clear(ctx, key)
            }
            func (DS *GormDataloader) {{.TypeName}}ClearAll() {
                DS.{{.TypeName}}Dataloader.ClearAll()
            }
            func (DS *GormDataloader) {{.TypeName}}Load(ctx context.Context, key {{$type}}) dataloader.Thunk[{{.TypeName}}] {
                t := DS.{{.TypeName}}Dataloader.Load(ctx, key)
                if DS.GormDataloaderParams.{{.TypeName}}GormDataloaderParams.DisableAutoErrorClear {
                    return t
                }
                _, err := t()
                if err != nil {
                    DS.{{.TypeName}}Clear(ctx, key)
                }
                return t
            }
            func (DS *GormDataloader) {{.TypeName}}LoadMany(ctx context.Context, keys []{{$type}}) dataloader.ThunkMany[{{.TypeName}}] {
                t := DS.{{.TypeName}}Dataloader.LoadMany(ctx, keys)
                if DS.GormDataloaderParams.{{.TypeName}}GormDataloaderParams.DisableAutoErrorClear {
                    return t
                }
                _, errs := t()
                for i,v := range errs {
                    if v != nil {
                        DS.{{.TypeName}}Clear(ctx, keys[i])
                    }
                }
                return t
            }
            func (DS *GormDataloader) {{.TypeName}}Prime(ctx context.Context, key {{$type}}, value {{.TypeName}}) {
                DS.{{.TypeName}}Dataloader.Prime(ctx, key, value)
            }
            {{end}}
        {{end}}
    {{end}}

{{end}}
